using Microsoft.Extensions.Logging;

namespace Zooyard.Utils;

internal static class EventIds
{
    public static readonly EventId LoadData = new (1, "ApplyProxyConfig");
    public static readonly EventId ErrorSignalingChange = new (2, "ApplyProxyConfigFailed");
    public static readonly EventId NoClusterFound = new (4, "NoClusterFound");
    public static readonly EventId NoAvailableDestinations = new (7, "NoAvailableDestinations");
    public static readonly EventId MultipleDestinationsAvailable = new (8, "MultipleDestinationsAvailable");
    public static readonly EventId Forwarding = new (9, "Forwarding");
    public static readonly EventId ExplicitActiveCheckOfAllClustersHealthFailed = new (10, "ExplicitActiveCheckOfAllClustersHealthFailed");
    public static readonly EventId ActiveHealthProbingFailedOnCluster = new (11, "ActiveHealthProbingFailedOnCluster");
    public static readonly EventId ErrorOccuredDuringActiveHealthProbingShutdownOnCluster = new (12, "ErrorOccuredDuringActiveHealthProbingShutdownOnCluster");
    public static readonly EventId ActiveHealthProbeConstructionFailedOnCluster = new (13, "ActiveHealthProbeConstructionFailedOnCluster");
    public static readonly EventId StartingActiveHealthProbingOnCluster = new (14, "StartingActiveHealthProbingOnCluster");
    public static readonly EventId StoppedActiveHealthProbingOnCluster = new (15, "StoppedActiveHealthProbingOnCluster");
    public static readonly EventId DestinationProbingCompleted = new (16, "DestinationActiveProbingCompleted");
    public static readonly EventId DestinationProbingFailed = new (17, "DestinationActiveProbingFailed");
    public static readonly EventId SendingHealthProbeToEndpointOfDestination = new (18, "SendingHealthProbeToEndpointOfDestination");
    public static readonly EventId UnhealthyDestinationIsScheduledForReactivation = new (19, "UnhealthyDestinationIsScheduledForReactivation");
    public static readonly EventId PassiveDestinationHealthResetToUnkownState = new (20, "PassiveDestinationHealthResetToUnkownState");
    public static readonly EventId ClusterAdded = new (21, "ClusterAdded");
    public static readonly EventId ClusterChanged = new (22, "ClusterChanged");
    public static readonly EventId ClusterRemoved = new (23, "ClusterRemoved");
    public static readonly EventId DestinationAdded = new (24, "EndpointAdded");
    public static readonly EventId DestinationChanged = new (25, "EndpointChanged");
    public static readonly EventId DestinationRemoved = new (26, "EndpointRemoved");
    public static readonly EventId RouteAdded = new (27, "RouteAdded");
    public static readonly EventId RouteChanged = new (28, "RouteChanged");
    public static readonly EventId RouteRemoved = new (29, "RouteRemoved");
    public static readonly EventId HttpDowngradeDetected = new (30, "HttpDowngradeDetected");
    public static readonly EventId OperationStarted = new (31, "OperationStarted");
    public static readonly EventId OperationEnded = new (32, "OperationEnded");
    public static readonly EventId OperationFailed = new (33, "OperationFailed");
    public static readonly EventId AffinityResolutionFailedForCluster = new (34, "AffinityResolutionFailedForCluster");
    public static readonly EventId MultipleDestinationsOnClusterToEstablishRequestAffinity = new (35, "MultipleDestinationsOnClusterToEstablishRequestAffinity");
    public static readonly EventId AffinityCannotBeEstablishedBecauseNoDestinationsFoundOnCluster = new (36, "AffinityCannotBeEstablishedBecauseNoDestinationsFoundOnCluster");
    public static readonly EventId NoDestinationOnClusterToEstablishRequestAffinity = new (37, "NoDestinationOnClusterToEstablishRequestAffinity");
    public static readonly EventId RequestAffinityKeyDecryptionFailed = new (38, "RequestAffinityKeyDecryptionFailed");
    public static readonly EventId DestinationMatchingToAffinityKeyNotFound = new (39, "DestinationMatchingToAffinityKeyNotFound");
    public static readonly EventId RequestAffinityHeaderHasMultipleValues = new (40, "RequestAffinityHeaderHasMultipleValues");
    public static readonly EventId AffinityResolutionFailureWasHandledProcessingWillBeContinued = new (41, "AffinityResolutionFailureWasHandledProcessingWillBeContinued");
    public static readonly EventId ClusterConfigException = new (42, "ClusterConfigException");
    public static readonly EventId ErrorReloadingConfig = new (43, "ErrorReloadingConfig");
    public static readonly EventId ErrorApplyingConfig = new (44, "ErrorApplyingConfig");
    public static readonly EventId ClientCreated = new (45, "ClientCreated");
    public static readonly EventId ClientReused = new (46, "ClientReused");
    public static readonly EventId ConfigurationDataConversionFailed = new (47, "ConfigurationDataConversionFailed");
    public static readonly EventId ForwardingError = new (48, "ForwardingError");
    public static readonly EventId ActiveDestinationHealthStateIsSetToUnhealthy = new (49, "ActiveDestinationHealthStateIsSetToUnhealthy");
    public static readonly EventId ActiveDestinationHealthStateIsSet = new (50, "ActiveDestinationHealthStateIsSet");
    public static readonly EventId DelegationQueueInitializationFailed = new (51, "DelegationQueueInitializationFailed");
    public static readonly EventId DelegationQueueNotFound = new (52, "DelegationQueueNotFound");
    public static readonly EventId DelegationQueueNotInitialized = new (53, "DelegationQueueNotInitialized");
    public static readonly EventId DelegatingRequest = new (54, "DelegatingRequest");
    public static readonly EventId DelegationFailed = new (55, "DelegationFailed");
    public static readonly EventId ResponseReceived = new (56, "ResponseReceived");
    public static readonly EventId DelegationQueueReset = new (57, "DelegationQueueReset");
    public static readonly EventId Http10RequestVersionDetected = new (58, "Http10RequestVersionDetected");
    public static readonly EventId NotForwarding = new (59, "NotForwarding");
    public static readonly EventId MaxRequestBodySizeSet = new (60, "MaxRequestBodySizeSet");
    public static readonly EventId RetryingWebSocketDowngradeNoConnect = new (61, "RetryingWebSocketDowngradeNoConnect");
    public static readonly EventId RetryingWebSocketDowngradeNoHttp2 = new (62, "RetryingWebSocketDowngradeNoHttp2");
    public static readonly EventId InvalidSecWebSocketKeyHeader = new (63, "InvalidSecWebSocketKeyHeader");
}
