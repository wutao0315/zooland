/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace RpcContractThrift
{
  public partial class HelloService
  {
    /// <summary>
    /// thrift HelloService
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// CallNameVoid
      /// </summary>
      global::System.Threading.Tasks.Task<string> CallNameVoid(CancellationToken cancellationToken = default);

      /// <summary>
      /// CallName
      /// </summary>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task CallName(string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// CallVoid
      /// </summary>
      global::System.Threading.Tasks.Task CallVoid(CancellationToken cancellationToken = default);

      /// <summary>
      /// Hello
      /// </summary>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<string> Hello(string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// SayHello
      /// </summary>
      /// <param name="name"></param>
      global::System.Threading.Tasks.Task<global::RpcContractThrift.HelloData> SayHello(string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// ShowHello
      /// </summary>
      /// <param name="hello"></param>
      global::System.Threading.Tasks.Task<string> ShowHello(global::RpcContractThrift.HelloData hello, CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// thrift HelloService
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> CallNameVoid(CancellationToken cancellationToken = default)
      {
        await send_CallNameVoid(cancellationToken);
        return await recv_CallNameVoid(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallNameVoid(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallNameVoid", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp5 = new InternalStructs.CallNameVoid_args() {
        };
        
        await tmp5.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_CallNameVoid(CancellationToken cancellationToken = default)
      {
        
        var tmp6 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp6.Type == TMessageType.Exception)
        {
          var tmp7 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp7;
        }

        var tmp8 = new InternalStructs.CallNameVoid_result();
        await tmp8.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp8.__isset.success)
        {
          return tmp8.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallNameVoid failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task CallName(string name, CancellationToken cancellationToken = default)
      {
        await send_CallName(name, cancellationToken);
        await recv_CallName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallName(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp9 = new InternalStructs.CallName_args() {
          Name = name,
        };
        
        await tmp9.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_CallName(CancellationToken cancellationToken = default)
      {
        
        var tmp10 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp10.Type == TMessageType.Exception)
        {
          var tmp11 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp11;
        }

        var tmp12 = new InternalStructs.CallName_result();
        await tmp12.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallVoid(CancellationToken cancellationToken = default)
      {
        await send_CallVoid(cancellationToken);
        await recv_CallVoid(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallVoid(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallVoid", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp13 = new InternalStructs.CallVoid_args() {
        };
        
        await tmp13.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_CallVoid(CancellationToken cancellationToken = default)
      {
        
        var tmp14 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp14.Type == TMessageType.Exception)
        {
          var tmp15 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp15;
        }

        var tmp16 = new InternalStructs.CallVoid_result();
        await tmp16.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> Hello(string name, CancellationToken cancellationToken = default)
      {
        await send_Hello(name, cancellationToken);
        return await recv_Hello(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Hello(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Hello", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp17 = new InternalStructs.Hello_args() {
          Name = name,
        };
        
        await tmp17.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_Hello(CancellationToken cancellationToken = default)
      {
        
        var tmp18 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp18.Type == TMessageType.Exception)
        {
          var tmp19 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp19;
        }

        var tmp20 = new InternalStructs.Hello_result();
        await tmp20.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp20.__isset.success)
        {
          return tmp20.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Hello failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::RpcContractThrift.HelloData> SayHello(string name, CancellationToken cancellationToken = default)
      {
        await send_SayHello(name, cancellationToken);
        return await recv_SayHello(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SayHello(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SayHello", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp21 = new InternalStructs.SayHello_args() {
          Name = name,
        };
        
        await tmp21.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::RpcContractThrift.HelloData> recv_SayHello(CancellationToken cancellationToken = default)
      {
        
        var tmp22 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp22.Type == TMessageType.Exception)
        {
          var tmp23 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp23;
        }

        var tmp24 = new InternalStructs.SayHello_result();
        await tmp24.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp24.__isset.success)
        {
          return tmp24.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SayHello failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> ShowHello(global::RpcContractThrift.HelloData hello, CancellationToken cancellationToken = default)
      {
        await send_ShowHello(hello, cancellationToken);
        return await recv_ShowHello(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ShowHello(global::RpcContractThrift.HelloData hello, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ShowHello", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp25 = new InternalStructs.ShowHello_args() {
          Hello = hello,
        };
        
        await tmp25.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_ShowHello(CancellationToken cancellationToken = default)
      {
        
        var tmp26 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp26.Type == TMessageType.Exception)
        {
          var tmp27 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp27;
        }

        var tmp28 = new InternalStructs.ShowHello_result();
        await tmp28.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp28.__isset.success)
        {
          return tmp28.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ShowHello failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["CallNameVoid"] = CallNameVoid_ProcessAsync;
        processMap_["CallName"] = CallName_ProcessAsync;
        processMap_["CallVoid"] = CallVoid_ProcessAsync;
        processMap_["Hello"] = Hello_ProcessAsync;
        processMap_["SayHello"] = SayHello_ProcessAsync;
        processMap_["ShowHello"] = ShowHello_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task CallNameVoid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp29 = new InternalStructs.CallNameVoid_args();
        await tmp29.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp30 = new InternalStructs.CallNameVoid_result();
        try
        {
          tmp30.Success = await _iAsync.CallNameVoid(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CallNameVoid", TMessageType.Reply, seqid), cancellationToken); 
          await tmp30.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp31)
        {
          var tmp32 = $"Error occurred in {GetType().FullName}: {tmp31.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp31, tmp32);
          else
            Console.Error.WriteLine(tmp32);
          var tmp33 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallNameVoid", TMessageType.Exception, seqid), cancellationToken);
          await tmp33.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp34 = new InternalStructs.CallName_args();
        await tmp34.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp35 = new InternalStructs.CallName_result();
        try
        {
          await _iAsync.CallName(tmp34.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CallName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp35.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp36)
        {
          var tmp37 = $"Error occurred in {GetType().FullName}: {tmp36.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp36, tmp37);
          else
            Console.Error.WriteLine(tmp37);
          var tmp38 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallName", TMessageType.Exception, seqid), cancellationToken);
          await tmp38.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallVoid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp39 = new InternalStructs.CallVoid_args();
        await tmp39.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp40 = new InternalStructs.CallVoid_result();
        try
        {
          await _iAsync.CallVoid(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CallVoid", TMessageType.Reply, seqid), cancellationToken); 
          await tmp40.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp41)
        {
          var tmp42 = $"Error occurred in {GetType().FullName}: {tmp41.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp41, tmp42);
          else
            Console.Error.WriteLine(tmp42);
          var tmp43 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallVoid", TMessageType.Exception, seqid), cancellationToken);
          await tmp43.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Hello_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp44 = new InternalStructs.Hello_args();
        await tmp44.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp45 = new InternalStructs.Hello_result();
        try
        {
          tmp45.Success = await _iAsync.Hello(tmp44.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Hello", TMessageType.Reply, seqid), cancellationToken); 
          await tmp45.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp46)
        {
          var tmp47 = $"Error occurred in {GetType().FullName}: {tmp46.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp46, tmp47);
          else
            Console.Error.WriteLine(tmp47);
          var tmp48 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Hello", TMessageType.Exception, seqid), cancellationToken);
          await tmp48.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SayHello_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp49 = new InternalStructs.SayHello_args();
        await tmp49.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp50 = new InternalStructs.SayHello_result();
        try
        {
          tmp50.Success = await _iAsync.SayHello(tmp49.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SayHello", TMessageType.Reply, seqid), cancellationToken); 
          await tmp50.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp51)
        {
          var tmp52 = $"Error occurred in {GetType().FullName}: {tmp51.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp51, tmp52);
          else
            Console.Error.WriteLine(tmp52);
          var tmp53 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SayHello", TMessageType.Exception, seqid), cancellationToken);
          await tmp53.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ShowHello_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp54 = new InternalStructs.ShowHello_args();
        await tmp54.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp55 = new InternalStructs.ShowHello_result();
        try
        {
          tmp55.Success = await _iAsync.ShowHello(tmp54.Hello, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ShowHello", TMessageType.Reply, seqid), cancellationToken); 
          await tmp55.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp56)
        {
          var tmp57 = $"Error occurred in {GetType().FullName}: {tmp56.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp56, tmp57);
          else
            Console.Error.WriteLine(tmp57);
          var tmp58 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ShowHello", TMessageType.Exception, seqid), cancellationToken);
          await tmp58.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class CallNameVoid_args : TBase
      {

        public CallNameVoid_args()
        {
        }

        public CallNameVoid_args DeepCopy()
        {
          var tmp59 = new CallNameVoid_args();
          return tmp59;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp60 = new TStruct("CallNameVoid_args");
            await oprot.WriteStructBeginAsync(tmp60, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallNameVoid_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp61 = new StringBuilder("CallNameVoid_args(");
          tmp61.Append(')');
          return tmp61.ToString();
        }
      }


      public partial class CallNameVoid_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CallNameVoid_result()
        {
        }

        public CallNameVoid_result DeepCopy()
        {
          var tmp63 = new CallNameVoid_result();
          if((Success != null) && __isset.success)
          {
            tmp63.Success = this.Success;
          }
          tmp63.__isset.success = this.__isset.success;
          return tmp63;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp64 = new TStruct("CallNameVoid_result");
            await oprot.WriteStructBeginAsync(tmp64, cancellationToken);
            var tmp65 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp65.Name = "Success";
                tmp65.Type = TType.String;
                tmp65.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp65, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallNameVoid_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp66 = new StringBuilder("CallNameVoid_result(");
          int tmp67 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp67++) { tmp66.Append(", "); }
            tmp66.Append("Success: ");
            Success.ToString(tmp66);
          }
          tmp66.Append(')');
          return tmp66.ToString();
        }
      }


      public partial class CallName_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public CallName_args()
        {
        }

        public CallName_args DeepCopy()
        {
          var tmp68 = new CallName_args();
          if((Name != null) && __isset.name)
          {
            tmp68.Name = this.Name;
          }
          tmp68.__isset.name = this.__isset.name;
          return tmp68;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp69 = new TStruct("CallName_args");
            await oprot.WriteStructBeginAsync(tmp69, cancellationToken);
            var tmp70 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp70.Name = "name";
              tmp70.Type = TType.String;
              tmp70.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp70, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp71 = new StringBuilder("CallName_args(");
          int tmp72 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp72++) { tmp71.Append(", "); }
            tmp71.Append("Name: ");
            Name.ToString(tmp71);
          }
          tmp71.Append(')');
          return tmp71.ToString();
        }
      }


      public partial class CallName_result : TBase
      {

        public CallName_result()
        {
        }

        public CallName_result DeepCopy()
        {
          var tmp73 = new CallName_result();
          return tmp73;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp74 = new TStruct("CallName_result");
            await oprot.WriteStructBeginAsync(tmp74, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp75 = new StringBuilder("CallName_result(");
          tmp75.Append(')');
          return tmp75.ToString();
        }
      }


      public partial class CallVoid_args : TBase
      {

        public CallVoid_args()
        {
        }

        public CallVoid_args DeepCopy()
        {
          var tmp77 = new CallVoid_args();
          return tmp77;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp78 = new TStruct("CallVoid_args");
            await oprot.WriteStructBeginAsync(tmp78, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallVoid_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp79 = new StringBuilder("CallVoid_args(");
          tmp79.Append(')');
          return tmp79.ToString();
        }
      }


      public partial class CallVoid_result : TBase
      {

        public CallVoid_result()
        {
        }

        public CallVoid_result DeepCopy()
        {
          var tmp81 = new CallVoid_result();
          return tmp81;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp82 = new TStruct("CallVoid_result");
            await oprot.WriteStructBeginAsync(tmp82, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CallVoid_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp83 = new StringBuilder("CallVoid_result(");
          tmp83.Append(')');
          return tmp83.ToString();
        }
      }


      public partial class Hello_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public Hello_args()
        {
        }

        public Hello_args DeepCopy()
        {
          var tmp85 = new Hello_args();
          if((Name != null) && __isset.name)
          {
            tmp85.Name = this.Name;
          }
          tmp85.__isset.name = this.__isset.name;
          return tmp85;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp86 = new TStruct("Hello_args");
            await oprot.WriteStructBeginAsync(tmp86, cancellationToken);
            var tmp87 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp87.Name = "name";
              tmp87.Type = TType.String;
              tmp87.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp87, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Hello_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp88 = new StringBuilder("Hello_args(");
          int tmp89 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp89++) { tmp88.Append(", "); }
            tmp88.Append("Name: ");
            Name.ToString(tmp88);
          }
          tmp88.Append(')');
          return tmp88.ToString();
        }
      }


      public partial class Hello_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Hello_result()
        {
        }

        public Hello_result DeepCopy()
        {
          var tmp90 = new Hello_result();
          if((Success != null) && __isset.success)
          {
            tmp90.Success = this.Success;
          }
          tmp90.__isset.success = this.__isset.success;
          return tmp90;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp91 = new TStruct("Hello_result");
            await oprot.WriteStructBeginAsync(tmp91, cancellationToken);
            var tmp92 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp92.Name = "Success";
                tmp92.Type = TType.String;
                tmp92.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp92, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Hello_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp93 = new StringBuilder("Hello_result(");
          int tmp94 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp94++) { tmp93.Append(", "); }
            tmp93.Append("Success: ");
            Success.ToString(tmp93);
          }
          tmp93.Append(')');
          return tmp93.ToString();
        }
      }


      public partial class SayHello_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public SayHello_args()
        {
        }

        public SayHello_args DeepCopy()
        {
          var tmp95 = new SayHello_args();
          if((Name != null) && __isset.name)
          {
            tmp95.Name = this.Name;
          }
          tmp95.__isset.name = this.__isset.name;
          return tmp95;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp96 = new TStruct("SayHello_args");
            await oprot.WriteStructBeginAsync(tmp96, cancellationToken);
            var tmp97 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp97.Name = "name";
              tmp97.Type = TType.String;
              tmp97.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp97, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SayHello_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp98 = new StringBuilder("SayHello_args(");
          int tmp99 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp99++) { tmp98.Append(", "); }
            tmp98.Append("Name: ");
            Name.ToString(tmp98);
          }
          tmp98.Append(')');
          return tmp98.ToString();
        }
      }


      public partial class SayHello_result : TBase
      {
        private global::RpcContractThrift.HelloData _success;

        public global::RpcContractThrift.HelloData Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SayHello_result()
        {
        }

        public SayHello_result DeepCopy()
        {
          var tmp100 = new SayHello_result();
          if((Success != null) && __isset.success)
          {
            tmp100.Success = (global::RpcContractThrift.HelloData)this.Success.DeepCopy();
          }
          tmp100.__isset.success = this.__isset.success;
          return tmp100;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::RpcContractThrift.HelloData();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp101 = new TStruct("SayHello_result");
            await oprot.WriteStructBeginAsync(tmp101, cancellationToken);
            var tmp102 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp102.Name = "Success";
                tmp102.Type = TType.Struct;
                tmp102.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp102, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SayHello_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp103 = new StringBuilder("SayHello_result(");
          int tmp104 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp104++) { tmp103.Append(", "); }
            tmp103.Append("Success: ");
            Success.ToString(tmp103);
          }
          tmp103.Append(')');
          return tmp103.ToString();
        }
      }


      public partial class ShowHello_args : TBase
      {
        private global::RpcContractThrift.HelloData _hello;

        public global::RpcContractThrift.HelloData Hello
        {
          get
          {
            return _hello;
          }
          set
          {
            __isset.hello = true;
            this._hello = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hello;
        }

        public ShowHello_args()
        {
        }

        public ShowHello_args DeepCopy()
        {
          var tmp105 = new ShowHello_args();
          if((Hello != null) && __isset.hello)
          {
            tmp105.Hello = (global::RpcContractThrift.HelloData)this.Hello.DeepCopy();
          }
          tmp105.__isset.hello = this.__isset.hello;
          return tmp105;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Hello = new global::RpcContractThrift.HelloData();
                    await Hello.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp106 = new TStruct("ShowHello_args");
            await oprot.WriteStructBeginAsync(tmp106, cancellationToken);
            var tmp107 = new TField();
            if((Hello != null) && __isset.hello)
            {
              tmp107.Name = "hello";
              tmp107.Type = TType.Struct;
              tmp107.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp107, cancellationToken);
              await Hello.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ShowHello_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hello == other.__isset.hello) && ((!__isset.hello) || (global::System.Object.Equals(Hello, other.Hello))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Hello != null) && __isset.hello)
            {
              hashcode = (hashcode * 397) + Hello.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp108 = new StringBuilder("ShowHello_args(");
          int tmp109 = 0;
          if((Hello != null) && __isset.hello)
          {
            if(0 < tmp109++) { tmp108.Append(", "); }
            tmp108.Append("Hello: ");
            Hello.ToString(tmp108);
          }
          tmp108.Append(')');
          return tmp108.ToString();
        }
      }


      public partial class ShowHello_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ShowHello_result()
        {
        }

        public ShowHello_result DeepCopy()
        {
          var tmp110 = new ShowHello_result();
          if((Success != null) && __isset.success)
          {
            tmp110.Success = this.Success;
          }
          tmp110.__isset.success = this.__isset.success;
          return tmp110;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp111 = new TStruct("ShowHello_result");
            await oprot.WriteStructBeginAsync(tmp111, cancellationToken);
            var tmp112 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp112.Name = "Success";
                tmp112.Type = TType.String;
                tmp112.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp112, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ShowHello_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp113 = new StringBuilder("ShowHello_result(");
          int tmp114 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp114++) { tmp113.Append(", "); }
            tmp113.Append("Success: ");
            Success.ToString(tmp113);
          }
          tmp113.Append(')');
          return tmp113.ToString();
        }
      }

    }

  }
}
