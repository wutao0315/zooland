/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace tutorial
{

  /// <summary>
  /// Structs can also be exceptions, if they are nasty.
  /// </summary>
  public partial class InvalidOperation : TException, TBase
  {
    private int _whatOp;
    private string _why;

    public int WhatOp
    {
      get
      {
        return _whatOp;
      }
      set
      {
        __isset.whatOp = true;
        this._whatOp = value;
      }
    }

    public string Why
    {
      get
      {
        return _why;
      }
      set
      {
        __isset.why = true;
        this._why = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool whatOp;
      public bool why;
    }

    public InvalidOperation()
    {
    }

    public InvalidOperation DeepCopy()
    {
      var tmp2 = new InvalidOperation();
      if(__isset.whatOp)
      {
        tmp2.WhatOp = this.WhatOp;
      }
      tmp2.__isset.whatOp = this.__isset.whatOp;
      if((Why != null) && __isset.why)
      {
        tmp2.Why = this.Why;
      }
      tmp2.__isset.why = this.__isset.why;
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                WhatOp = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Why = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("InvalidOperation");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.whatOp)
        {
          field.Name = "whatOp";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(WhatOp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Why != null) && __isset.why)
        {
          field.Name = "why";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Why, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is InvalidOperation other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.whatOp == other.__isset.whatOp) && ((!__isset.whatOp) || (System.Object.Equals(WhatOp, other.WhatOp))))
        && ((__isset.why == other.__isset.why) && ((!__isset.why) || (System.Object.Equals(Why, other.Why))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.whatOp)
        {
          hashcode = (hashcode * 397) + WhatOp.GetHashCode();
        }
        if((Why != null) && __isset.why)
        {
          hashcode = (hashcode * 397) + Why.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("InvalidOperation(");
      int tmp3 = 0;
      if(__isset.whatOp)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("WhatOp: ");
        WhatOp.ToString(sb);
      }
      if((Why != null) && __isset.why)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("Why: ");
        Why.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
