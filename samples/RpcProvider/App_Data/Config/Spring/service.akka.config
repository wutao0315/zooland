<objects xmlns="http://www.springframework.net"
             xmlns:aop="http://www.springframework.net/aop">

  <object id="AkkaServerImpl" type="Zooyard.Rpc.AkkaImpl.AkkaServer, Zooyard.Rpc.AkkaImpl" parent="AbstractServer">
    <constructor-arg name="actorName" value="RpcContractAkka.IHelloService"/>
    <constructor-arg name="actorConfig">
      <value>
        <![CDATA[       
              akka {  
                      #log-config-on-start = on
                      #stdout-loglevel = DEBUG
                      #loglevel = DEBUG
                      actor {
                          provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"
                          #debug {  
                          #  receive = on 
                          #  autoreceive = on
                          #  lifecycle = on
                          #  event-stream = on
                          #  unhandled = on
                          #}
                      }
                      remote {
                          dot-netty.tcp {
                              port = 10011
                              hostname = 0.0.0.0
                              public-hostname = localhost 
                          }
                      }
                    }
                    ]]>
      </value>
    </constructor-arg>
    <constructor-arg name="actors" ref="Actors"/>
    <constructor-arg name="loggerFactory" ref="LoggerFactory"/>
  </object>

  <object id="Actors" type="System.Collections.Generic.Dictionary&lt;string, Zooyard.Rpc.AkkaImpl.ZooyardActor&gt;, mscorlib">
    <constructor-arg>
      <dictionary key-type="string" value-type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
        <entry key="CallNameVoid" value-ref="CallNameVoidActor"/>
        <entry key="CallName" value-ref="CallNameActor"/>
        <entry key="CallVoid" value-ref="CallVoidActor"/>
        <entry key="Hello" value-ref="HelloActor"/>
        <entry key="SayHello" value-ref="SayHelloActor"/>
        <entry key="ShowHello" value-ref="ShowHelloActor"/>
      </dictionary>
    </constructor-arg>
  </object>

  <object id="CallNameVoidActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.CallNameVoidActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>
  <object id="CallNameActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.CallNameActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>
  <object id="CallVoidActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.CallVoidActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>
  
  <object id="HelloActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.HelloActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>

  <object id="SayHelloActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.SayHelloActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>
  <object id="ShowHelloActor" type="Zooyard.Rpc.AkkaImpl.ZooyardActor, Zooyard.Rpc.AkkaImpl">
    <property name="ActorType" expression="T(RpcProvider.ShowHelloActor, RpcProvider)"/>
    <property name="Args" ref="HelloActorArgs"/>
  </object>

  <object id="HelloActorArgs" type="System.Collections.Generic.List&lt;System.Object&gt;, mscorlib">
    <constructor-arg>
      <list element-type="System.Object, mscorlib">
        <value>A</value>
        <!--<ref object="hotelLonden4"/>-->
      </list>
    </constructor-arg>
  </object>

  
</objects>